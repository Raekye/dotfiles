ln -s source shortcut
mklink /H shorcut_file source_file
mklink /J shortcut_dir source_dir
~/.config/sublime-text-3/Package/User/Preferences.sublime-settings
sudo iptables -A INPUT -p tcp --dport ssh -j ACCEPT
sudo iptables -I INPUT 1 -p tcp --dport 80 -j ACCEPT
apt-get -f install
/etc/cron.daily/trim

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

git curl vim-gnome nautilus-open-terminal python3 python3-dev ruby ruby-dev haskell-platform erlang openjdk-7-jdk checkinstall build-essential texlive texlive-latex-extra

git vim-X11 nautilus-open-terminal texlive

cat /proc/sys/vm/swappiness
sysctl vm.swappiness=2
swapoff -a
swapon -a

## Hmmm
- `shopt -q login_shell && echo 'Login shell' || echo 'Not login shell'`
- `[[ "$-" == *i* ]] && echo 'Interactive' || echo 'Not interactive'`

- `.profile` read by `sh` login shells
	- `bash`, often being backwards compatible, often reads this file too (login shell only)
- `.bash_profile` only read by `bash` login shells
- `.bashrc` only read by `bash` non-login, interactive shells
- often, `.bash_profile` reads `.bashrc` to maintain same config between login and non-login shells

## Double fork daemons
- sid -> pgid -> pid
- every session can have a tty, only the session leader can acquire a tty
- `setsid` creates a new process group and session (sid = pgid = pid)
- after 1 fork and no setsid, the child is still part of the same session and can get control of the original tty (if the session had one)
- after 1 fork and setsid, the child is a session leader and can acquire a tty
- after fork, setsid, and fork, the grandchild is adopted by init, and is not a session leader so cannot acquire a tty
