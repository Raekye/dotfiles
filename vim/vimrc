
set exrc
set secure

set number
set ruler
set scrolloff=4

set hidden
set backspace=indent,eol,start
set autoread " update if changed externally and not modified locally
set nobackup " make backup before overwriting, and leave it around
set noswapfile " use swapfile for buffer

set encoding=utf-8
set ffs=unix,dos
set list
set listchars=eol:$,tab:>\
set listchars+=multispace:-,lead:-,trail:-
set listchars+=extends:>,precedes:<,conceal:!,nbsp:%
if v:version >= 900
	set listchars+=leadmultispace:\|---
else
endif
set conceallevel=0

set shiftwidth=4
set tabstop=4

set smartindent " less strict than cindent
set autoindent
set breakindent

set ignorecase
set smartcase
set incsearch " ctrl-g and ctrl-t to move to next and previous match

set showcmd
set laststatus=2 " always show status line for last window

set wildmenu " command line completion
set wildoptions=pum

set ssop-=options
set ssop-=curdir
set ssop+=sesdir
set cscopequickfix=s-,g-,c-
set cscopetag

filetype on
syntax enable

let g:mapleader = ","

let g:markdown_recommended_style = 0
let g:python_recommended_style = 0

let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeShowHidden = 1

let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 0 " set local working directory to pwd
let g:ctrlp_max_files = 0
if executable('ag')
	let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
endif

let g:airline#extensions#tabline#enabled = 1
let g:airline_symbols_ascii = 1

if executable('ag')
	let g:ackprg = 'ag --vimgrep'
else
	let g:ackprg = 'grep --recursive --line-number'
endif

set omnifunc=ale#completion#OmniFunc
let g:ale_completion_enabled = 1
let g:ale_linters = { 'c': [], 'cpp': [], 'rust': ['analyzer'], }
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'] }
let g:ale_fix_on_save = 1
"let g:ale_virtualtext_cursor = 0

let g:gundo_prefer_python3 = 1

let g:rustfmt_autosave = 1
"let g:rustfmt_fail_silently = 1

call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized'
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'preservim/tagbar'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-characterize'
Plug 'easymotion/vim-easymotion'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sjl/gundo.vim'
" https://github.com/junegunn/vim-plug/issues/1005
Plug 'airblade/vim-gitgutter', { 'branch': 'main' }
Plug 'rust-lang/rust.vim'

call plug#end()

let g:solarized_termcolors = 256
let g:solarized_visibility = "low"
set background=light
if isdirectory($HOME . '/.vim/plugged/vim-colors-solarized')
	colorscheme solarized
endif

map Q <Nop>
map <C-n> :NERDTreeToggle<CR>
map <C-p> :CtrlP<CR>
map <C-l> :CtrlPBuffer<CR>
map <C-g> :TagbarToggle<CR>
map <C-h> <C-^>
map <C-c> :ccl<CR>:lcl<CR>
map <C-k> <Plug>(ale_previous_wrap)
map <C-j> <Plug>(ale_next_wrap)
nmap <leader>l :ls<CR>:buffer<space>
nmap <leader>g :Ack!<space>
nmap <leader>w :Gtags -s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>e :Gtags <C-R>=expand("<cword>")<CR><CR>
nmap <leader>r :Gtags -r <C-R>=expand("<cword>")<CR><CR>
nmap <leader>s :Gtags -s<space>
nmap <leader>d :Gtags<space>
nmap <leader>f :Gtags -r<space>
nmap <leader>u :GundoToggle<CR>
