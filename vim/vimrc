
set exrc
set secure
set number
set ruler
set showcmd
set smartindent " less strict than cindent
set autoindent
set ignorecase
set smartcase
set wildmenu " command line completion
set nobackup " make backup before overwriting, and leave it around
set noswapfile " use swapfile for buffer
set autoread " update if changed externally and not modified locally
set incsearch " ctrl-g and ctrl-t to move to next and previous match
set breakindent
set scrolloff=4
set laststatus=2 " always show status line for last window
set backspace=indent,eol,start
set ssop-=options
set ssop-=curdir
set ssop+=sesdir
set cscopequickfix=s-,g-,c-

let mapleader=","

let NERDTreeShowLineNumbers=1
let NERDTreeShowHidden=1

let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 0 " set local working directory to pwd
let g:ctrlp_max_files = 0

let g:airline#extensions#tabline#enabled = 1

let g:bufferline_echo = 0 " don't show in command bar

let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = 'Â·'

let g:gundo_prefer_python3 = 1

let g:ack_mappings = { "o": "<CR>:ccl<CR>" }
if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif

let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_key_list_select_completion = []
"let g:ycm_key_list_previous_completion = []

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"let g:ale_completion_enabled = 1
"let g:ale_c_parse_compile_commands = 1
let g:ale_linters = { 'c': [], 'cpp': [] }

set encoding=utf8
set ffs=unix,dos
set list
set listchars=tab:>\ ,trail:-,nbsp:+,eol:$

filetype on

set shiftwidth=4
set tabstop=4

autocmd FileType ruby setlocal expandtab shiftwidth=2 softtabstop=2
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd QuickFixCmdPost cscope copen
autocmd User YcmLocationOpened map o <CR>:lcl<CR>

syntax enable

"execute pathogen#infect()
"execute pathogen#helptags()
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-characterize'
"Plug 'vim-syntastic/syntastic'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-bufferline'
Plug 'Yggdroot/indentLine'
Plug 'sjl/gundo.vim'
Plug 'mileszs/ack.vim'
Plug 'airblade/vim-gitgutter'
"Plug 'ervandew/supertab'
"Plug 'Valloric/YouCompleteMe'
"Plug 'SirVer/ultisnips'
"Plug 'honza/vim-snippets'
Plug 'tomlion/vim-solidity'
Plug 'w0rp/ale'

call plug#end()

autocmd FileType nerdtree IndentLinesDisable

let g:solarized_termcolors=256
let g:solarized_visibility = "low"
colorscheme solarized
set background=light

map Q <Nop>
map <C-n> :NERDTreeToggle<CR>
map <C-p> :CtrlP<CR>
map <C-l> :CtrlPBuffer<CR>
map <C-g> :TagbarToggle<CR>
map <C-b> :YcmForceCompileAndDiagnostics<CR>:YcmDiags<CR>
map <C-j> :bp<CR>
map <C-k> :bn<CR>
map <C-h> <C-^>
map <C-c> :ccl<CR>:lcl<CR>
nmap <leader>l :ls<CR>:buffer<space>
nmap <leader>a :A<CR>
nmap <leader>g :Ack!<space>
nmap <leader>r <C-\>c
nmap <leader>e <C-]>
nmap <leader>w <C-\>s
nmap <leader>f :cs f c<space>
nmap <leader>d :cs f g<space>
nmap <leader>s :cs f s<space>
nmap <leader>u :GundoToggle<CR>
