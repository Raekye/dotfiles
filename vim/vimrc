" === TODO
" - cscope don't jump to first result when using quickfix.
" - shortcut to close quickfix/location list?
" - nerdtree split shenanigans...
" - how to do git diff --staged with fugitive?
" - open help in vertical split by default?

" === Tips/Reminders
" - <C-y> to accept current match in popup wildmenu.
"   No equivalent without popup menu (vim < 900)...

" === Global Options
" :help option-list
" To lookup a specific option, surround it in single quotes (e.g. `:help 'some-option'`).

set exrc " Load .vimrc in current directory (if it exists).
set secure " Disallow `:autocmd`, shell, and write commands in scripts loaded by setting `exrc`.

set number
set ruler
set scrolloff=4

set hidden
set backspace=indent,eol,start
set autoread
set noswapfile

" :help backup
set writebackup " Should be default.
set nobackup " Should be default.

set encoding=utf-8
set fileformats=unix,dos

set conceallevel=0
set list
set listchars=tab:>\ , " Add a comma here so that the space doesn't get trimmed by fixers/formatters.
set listchars+=eol:$
set listchars+=multispace:-,lead:-,trail:-
set listchars+=extends:>,precedes:<,conceal:!,nbsp:%
if v:version >= 900
	set listchars+=leadmultispace:\|---
else
endif

" This setting is the last "common configuration" under :help tabstop.
set tabstop=4
set shiftwidth=4
set noexpandtab

set autoindent
set smartindent " Less strict than cindent.
set breakindent " Wrapped lines continue indented.

set ignorecase
set smartcase
" Use <C-g> and <C-t> to move to next and previous match.
" :help c_CTRL-G
" :help c_CTRL-T
set incsearch

set showcmd
set laststatus=2 " Always show status line for last window.

set wildmenu " Command line completion.
if v:version >= 900
	set wildoptions=pum " Display using popup menu.
endif

set pastetoggle=<F2>

set splitright

set cursorline
set cursorlineopt=number

set noesckeys " https://stackoverflow.com/a/11940894

set sessionoptions=buffers

" === cscope
" :help cscope
set cscopetag
set cscopequickfix=s-,g-,c- " Use quickfix for symbols, definitions, and callers.
autocmd QuickFixCmdPost cscope copen
" https://www.gnu.org/software/global/globaldoc_toc.html#Gtags_002dcscope
if executable('gtags-cscope')
	set cscopeprg=gtags-cscope
	if filereadable('GTAGS')
		cscope add GTAGS
	endif
endif

" === Configuration Variables
" :help :map-special-chars
let g:mapleader = ','
let g:maplocalleader = ','

" :help filetype
let g:markdown_recommended_style = 0 " Don't expandtab.
let g:python_recommended_style = 0 " Don't expandtab.

" :help rust-settings
let g:rust_recommended_style = 0 " Don't expandtab.
let g:rustfmt_autosave = 1
let g:rustfmt_fail_silently = 1 " Don't populate location list.

" :help vim-markdown-options
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_auto_insert_bullets = 0

" :help NERDTreeSettings
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeShowHidden = 1
"let g:NERDTreeHijackNetrw = 1

" :help NERDCommenterOptions
let g:NERDCreateDefaultMappings = 0

" :help airline-configuration
let g:airline_symbols_ascii = 1

" :help ale-contents
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_enabled = 1
let g:ale_linters = {
	\ 'c': ['clangd'],
	\ 'cpp': ['clangd'],
	\ 'rust': ['analyzer'],
	\}
let g:ale_fixers = {
	\'*': ['remove_trailing_lines', 'trim_whitespace'],
	\}
let g:ale_fix_on_save = 1
"let g:ale_virtualtext_cursor = 0

" :help GundoConfig
let g:gundo_prefer_python3 = 1

" === Old
if executable('ag')
	let g:ackprg = 'ag --vimgrep'
else
	let g:ackprg = 'grep --recursive --line-number'
endif

" === https://github.com/junegunn/fzf.vim
function s:rg_files(dir, fullscreen)
	if empty(a:dir)
		call fzf#run(fzf#wrap(fzf#vim#with_preview({ 'source': 'rg --files' }), a:fullscreen))
	else
		call fzf#run(fzf#wrap(fzf#vim#with_preview({ 'source': 'rg --files -- ' .. fzf#shellescape(a:dir) }), a:fullscreen))
	endif
endfunction

" Don't escape `<q-args>` so that the dir (for `grep`/`rg`) can be specified.
command -bang -nargs=* -complete=tag Grep call fzf#vim#grep('grep --recursive --line-number --extended-regexp -- ' .. <q-args>, fzf#vim#with_preview(), <bang>0)
command -bang -nargs=* -complete=tag Rg call fzf#vim#grep('rg --column --line-number --no-heading --color=always --smart-case -- ' .. <q-args>, fzf#vim#with_preview(), <bang>0)
command -bang -nargs=? -complete=dir RgFiles call s:rg_files(<q-args>, <bang>0)

" === https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'preservim/tagbar'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
"Plug 'mileszs/ack.vim'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
" Enhance 'ga' output (shows info about character under the cursor).
Plug 'tpope/vim-characterize'
"Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-obsession'

Plug 'easymotion/vim-easymotion'

Plug 'dense-analysis/ale'

" https://github.com/junegunn/vim-plug/issues/1005
Plug 'airblade/vim-gitgutter', { 'branch': 'main' }

" The `rust.vim`/`rustfmt.vim` distributed with vim on Fedora 38 is out of date and calls rustfmt incorrectly.
Plug 'rust-lang/rust.vim'

Plug 'https://github.com/preservim/vim-markdown'

" Not really used...
Plug 'sjl/gundo.vim'

" Automatically executes `filetype plugin indent on` and `syntax on`.
call plug#end()

" :help solarized-options
let g:solarized_termcolors = 256
let g:solarized_visibility = "low"
set background=light
if isdirectory($HOME .. '/.vim/plugged/vim-colors-solarized')
	colorscheme solarized
endif

" === Shortcuts (non-recursive)
" :help index

" mapmode-n (nmap -> nn[oremap])
" :help mode-Ex
nn Q <Nop>
" :help ctrl-6
nn <C-j> <C-^>
" Stop highlighting search.
nn <silent> <Esc> :nohlsearch<CR>

nn <C-n> :NERDTreeToggle<CR>
nn <C-l> :Buffers<CR>
nn <C-g> :TagbarToggle<CR>
nn <C-h> <Plug>NERDCommenterToggle

if executable('rg')
	nn <C-p> :RgFiles<CR>
	nn <leader>g :Rg<space>
else
	nn <C-p> :Files<CR>
	nn <leader>g :Grep<space>
endif

nn <leader>l :Lines<space>

nn <leader>w :ALESymbolSearch <C-R>=expand("<cword>")<CR><CR>
nn <leader>e <Plug>(ale_go_to_definition)
nn <leader>r <Plug>(ale_find_references)
nn [e <Plug>(ale_previous_wrap)
nn ]e <Plug>(ale_next_wrap)

" Find symbols, definitions, callers.
nn <leader>s :cscope find s<space>
nn <leader>d :cscope find g<space>
nn <leader>f :cscope find c<space>

nn <leader>u :GundoToggle<CR>

nn <leader><F1> :vert help<space>

" mapmode-x (xmap -> xn[oremap])
xn <C-h> <Plug>NERDCommenterToggle

" https://github.com/mhinz/vim-galore#saner-behavior-of-n-and-n
" Make 'n' and 'N' search direction agnostic of '/' and '?'.
nn <expr> n 'Nn'[v:searchforward]
nn <expr> N 'nN'[v:searchforward]

" mapmode-c (cmap -> cno[remap])
" https://github.com/mhinz/vim-galore#saner-command-line-history
" Make '<C-n>' and '<C-p>' autocomplete based on matching prefix.
cno <expr> <C-n> wildmenumode() ? "\<C-n>" : "\<Down>"
cno <expr> <C-p> wildmenumode() ? "\<C-p>" : "\<Up>"
